# window.py
#
# Copyright 2024 mirkobrombin
# Copyright 2024 muqtadir
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundationat version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import json
import logging
import os

from gi.repository import Adw, Gtk

from vanilla_installer.utils.builder import Builder
from vanilla_installer.utils.processor import Processor
from vanilla_installer.views.confirm import VanillaConfirm
from vanilla_installer.views.done import VanillaDone
from vanilla_installer.views.progress import VanillaProgress

logger = logging.getLogger("Installer::Window")


@Gtk.Template(resource_path="/org/vanillaos/Installer/gtk/window.ui")
class VanillaWindow(Adw.ApplicationWindow):
    __gtype_name__ = "VanillaWindow"

    carousel = Gtk.Template.Child()
    carousel_indicator_dots = Gtk.Template.Child()
    btn_back = Gtk.Template.Child()
    toasts = Gtk.Template.Child()

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        # this starts the builder and generates the widgets
        # to put in the carousel
        self.__builder = Builder(self)

        # system views
        self.__view_confirm = VanillaConfirm(self)
        self.__view_progress = VanillaProgress(self, self.recipe.get("tour", {}))
        self.__view_done = VanillaDone(self)

        # this builds the UI with the widgets generated by the builder
        self.__build_ui()

        # connect system signals
        self.__connect_signals()

        # some variables to track state
        self.install_mode = 0

    def __connect_signals(self):
        self.btn_back.connect("clicked", self.back)
        self.carousel.connect("page-changed", self.__on_page_changed)
        self.__builder.widgets[-1].btn_next.connect("clicked", self.update_finals)
        self.__view_confirm.connect("installation-confirmed", self.on_installation_confirmed)

    def rebuild_ui(self, mode=1):
        self.install_mode = mode
        self.__build_ui(True, mode)

    def __build_ui(self, rebuild=False, mode=0):
        property_list = self.__builder.property_list

        if rebuild:
            self.carousel.remove(self.__view_confirm)
            self.carousel.remove(self.__view_progress)
            self.carousel.remove(self.__view_done)

        if "VANILLA_FORCE_TOUR" not in os.environ:
            for i, widget in enumerate(self.__builder.widgets):
                if rebuild:
                    if "protected" in property_list[i]:
                        continue
                    else:
                        self.carousel.remove(widget)
                if "custom_image" in property_list[i] and mode == 0:
                    continue
                if "default_image" in property_list[i] and mode == 1:
                    continue
                logger.info("(%s) Adding widget to carousel", widget.__gtype_name__)
                self.carousel.append(widget)
        else:
            self.__on_page_changed()

        self.carousel.append(self.__view_confirm)
        self.carousel.append(self.__view_progress)
        self.carousel.append(self.__view_done)

    def __on_page_changed(self, *args):
        cur_index = self.carousel.get_position()
        page = self.carousel.get_nth_page(cur_index)

        logger.info("(%s) Page is changing...", page.__gtype_name__)

        if page not in [self.__view_progress, self.__view_done]:
            logger.info("(%s) It is not a final page", page.__gtype_name__)
            self.btn_back.set_visible(cur_index != 0.0)
            self.btn_back.set_sensitive(cur_index != 0.0)
            self.carousel_indicator_dots.set_visible(cur_index != 0.0)
            return

        logger.info("(%s) It is a final page", page.__gtype_name__)

        self.btn_back.set_visible(False)
        self.btn_back.set_sensitive(False)
        self.carousel_indicator_dots.set_visible(False)

        # keep the btn_back button locked if this is the last page
        if page == self.__view_done:
            logger.info("(%s) It is the DONE page", page.__gtype_name__)
            return

    def update_finals(self, *args):
        # collect all the finals
        if "VANILLA_FORCE_TOUR" not in os.environ:
            self.finals = self.__builder.get_finals()
        else:
            self.finals = json.loads(os.environ["VANILLA_FORCE_TOUR"])

        self.__view_confirm.update(self.finals)

    def on_installation_confirmed(self, *args):
        recipe = Processor.gen_install_recipe(
            self.recipe.get("log_file", "/tmp/vanilla_installer.log"),
            self.finals,
            self.recipe,
        )
        self.next()
        self.__view_progress.start(recipe)

    def next(self, widget=None, fn=None, *args):
        logger.info("Going to next page")

        cur_index = self.carousel.get_position()
        logger.info(f"Next page is {int(cur_index + 1)}")

        if fn is not None:
            logger.info("Executing page's custom function")
            fn()
            logger.info("Finished executing page's custom function")

        page = self.carousel.get_nth_page(cur_index + 1)
        self.carousel.scroll_to(page, True)

    def back(self, *args):
        logger.info("Going to previous page")

        cur_index = self.carousel.get_position()
        logger.info(f"Previous page is {int(cur_index - 1)}")

        page = self.carousel.get_nth_page(cur_index - 1)
        self.carousel.scroll_to(page, True)

    def toast(self, message, timeout=3):
        toast = Adw.Toast.new(message)
        toast.props.timeout = timeout
        self.toasts.add_toast(toast)

    def set_installation_result(self, result, terminal):
        self.__view_done.set_result(result, terminal)
        self.next()
